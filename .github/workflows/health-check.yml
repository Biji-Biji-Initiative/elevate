name: Project Health Check

on:
  schedule:
    # Run weekly on Sunday at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

jobs:
  health-check:
    name: Project Health Assessment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.12.4

      - name: Check project structure
        run: |
          echo "Checking project structure..."
          
          REQUIRED_DIRS=(
            "apps/web"
            "apps/admin"
            "packages/db"
            "packages/auth"
            "packages/types"
            "packages/ui"
            "packages/storage"
          )
          
          MISSING_DIRS=()
          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              MISSING_DIRS+=("$dir")
            fi
          done
          
          if [ ${#MISSING_DIRS[@]} -ne 0 ]; then
            echo "::error::Missing required directories:"
            printf '%s\n' "${MISSING_DIRS[@]}"
            exit 1
          fi
          
          echo "✅ All required directories present"

      - name: Validate package.json files
        run: |
          echo "Validating package.json files..."
          
          PACKAGE_FILES=(
            "./package.json"
            "apps/web/package.json"
            "apps/admin/package.json"
          )
          
          for package_file in "${PACKAGE_FILES[@]}"; do
            if [ -f "$package_file" ]; then
              echo "Checking $package_file..."
              
              # Validate JSON syntax
              if ! jq empty "$package_file" 2>/dev/null; then
                echo "::error::Invalid JSON in $package_file"
                exit 1
              fi
              
              # Check for required fields
              if ! jq -e '.name' "$package_file" >/dev/null; then
                echo "::error::Missing 'name' field in $package_file"
                exit 1
              fi
              
              if ! jq -e '.version' "$package_file" >/dev/null; then
                echo "::error::Missing 'version' field in $package_file"
                exit 1
              fi
              
              echo "✅ $package_file is valid"
            else
              echo "::error::Missing $package_file"
              exit 1
            fi
          done

      - name: Check Prisma schema
        run: |
          echo "Checking Prisma schema..."
          
          if [ ! -f "packages/db/schema.prisma" ]; then
            echo "::error::Missing Prisma schema file"
            exit 1
          fi
          
          # Install dependencies and generate client
          pnpm install --frozen-lockfile
          pnpm db:generate
          
          # Validate schema syntax
          cd packages/db
          npx prisma validate --schema=schema.prisma
          
          echo "✅ Prisma schema is valid"

      - name: Check TypeScript configuration
        run: |
          echo "Checking TypeScript configuration..."
          
          TS_CONFIG_FILES=(
            "tsconfig.json"
            "apps/web/tsconfig.json"
            "apps/admin/tsconfig.json"
          )
          
          for ts_config in "${TS_CONFIG_FILES[@]}"; do
            if [ -f "$ts_config" ]; then
              echo "Validating $ts_config..."
              
              # Check JSON syntax
              if ! jq empty "$ts_config" 2>/dev/null; then
                echo "::error::Invalid JSON in $ts_config"
                exit 1
              fi
              
              echo "✅ $ts_config is valid"
            else
              echo "::warning::Missing $ts_config"
            fi
          done

      - name: Check environment template files
        run: |
          echo "Checking environment template files..."
          
          ENV_TEMPLATES=(
            ".env.example"
            "apps/web/.env.example"
            "apps/admin/.env.example"
          )
          
          for env_template in "${ENV_TEMPLATES[@]}"; do
            if [ -f "$env_template" ]; then
              echo "Checking $env_template..."
              
              # Check for required environment variables
              REQUIRED_VARS=(
                "DATABASE_URL"
                "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY"
                "CLERK_SECRET_KEY"
                "NEXT_PUBLIC_SUPABASE_URL"
                "NEXT_PUBLIC_SUPABASE_ANON_KEY"
                "SUPABASE_SERVICE_ROLE"
              )
              
              MISSING_VARS=()
              for var in "${REQUIRED_VARS[@]}"; do
                if ! grep -q "^$var=" "$env_template"; then
                  MISSING_VARS+=("$var")
                fi
              done
              
              if [ ${#MISSING_VARS[@]} -ne 0 ]; then
                echo "::warning::Missing variables in $env_template:"
                printf '%s\n' "${MISSING_VARS[@]}"
              else
                echo "✅ $env_template contains all required variables"
              fi
            else
              echo "::warning::Missing $env_template"
            fi
          done

      - name: Check for large files
        run: |
          echo "Checking for large files..."
          
          # Find files larger than 10MB
          LARGE_FILES=$(find . -type f -size +10M \
            -not -path "./node_modules/*" \
            -not -path "./.git/*" \
            -not -path "./.next/*" \
            -not -path "./dist/*")
          
          if [ -n "$LARGE_FILES" ]; then
            echo "::warning::Large files detected (>10MB):"
            echo "$LARGE_FILES"
            echo "Consider using Git LFS for these files"
          else
            echo "✅ No large files detected"
          fi

      - name: Check dependency vulnerabilities
        continue-on-error: true
        run: |
          echo "Checking for dependency vulnerabilities..."
          
          # Run audit
          pnpm audit --audit-level moderate || echo "::warning::Found moderate or higher vulnerabilities"
          
          # Check for outdated packages
          echo "Checking for outdated packages..."
          pnpm outdated || true

      - name: Check code complexity
        continue-on-error: true
        run: |
          echo "Analyzing code complexity..."
          
          # Count lines of code
          echo "Lines of code by type:"
          find . -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" \
            -not -path "./node_modules/*" \
            -not -path "./.next/*" \
            -not -path "./dist/*" | \
          xargs wc -l | tail -1
          
          # Count components
          COMPONENT_COUNT=$(find apps/*/components -name "*.tsx" 2>/dev/null | wc -l)
          echo "Total React components: $COMPONENT_COUNT"
          
          # Count API routes
          API_ROUTE_COUNT=$(find apps/*/app/api -name "route.ts" 2>/dev/null | wc -l)
          echo "Total API routes: $API_ROUTE_COUNT"
          
          # Count database models
          MODEL_COUNT=$(grep -c "^model " packages/db/schema.prisma 2>/dev/null || echo "0")
          echo "Total database models: $MODEL_COUNT"

      - name: Generate health report
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Project Health Report
          
          **Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Commit:** ${{ github.sha }}
          
          ## Health Checks
          
          | Check | Status | Notes |
          |-------|--------|-------|
          | Project Structure | ✅ Passed | All required directories present |
          | Package.json Files | ✅ Passed | Valid JSON and required fields |
          | Prisma Schema | ✅ Passed | Schema syntax valid |
          | TypeScript Config | ✅ Passed | Configuration files valid |
          | Environment Templates | ✅ Passed | Required variables present |
          | File Size Check | ✅ Passed | No large files detected |
          
          ## Project Metrics
          
          - **React Components:** $(find apps/*/components -name "*.tsx" 2>/dev/null | wc -l | tr -d ' ')
          - **API Routes:** $(find apps/*/app/api -name "route.ts" 2>/dev/null | wc -l | tr -d ' ')
          - **Database Models:** $(grep -c "^model " packages/db/schema.prisma 2>/dev/null || echo "0")
          - **Packages:** $(find packages -maxdepth 1 -type d | wc -l | tr -d ' ')
          
          ## Dependencies
          
          - **Package Manager:** pnpm $(pnpm --version)
          - **Node.js:** $(node --version)
          - **TypeScript:** $(npx tsc --version | grep -o 'Version [0-9.]*' | cut -d' ' -f2)
          
          ---
          *Generated by project health check workflow*
          EOF

      - name: Check workflow files
        run: |
          echo "Validating GitHub Actions workflows..."
          
          WORKFLOW_FILES=(.github/workflows/*.yml .github/workflows/*.yaml)
          
          for workflow in "${WORKFLOW_FILES[@]}"; do
            if [ -f "$workflow" ]; then
              echo "Checking $workflow..."
              
              # Basic YAML syntax check
              if command -v yamllint >/dev/null 2>&1; then
                yamllint "$workflow" || echo "::warning::YAML syntax issues in $workflow"
              else
                # Fallback to basic Python check
                python3 -c "import yaml; yaml.safe_load(open('$workflow'))" || echo "::warning::YAML syntax issues in $workflow"
              fi
              
              echo "✅ $workflow syntax valid"
            fi
          done