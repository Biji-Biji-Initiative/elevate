name: Environment Check

on:
  schedule:
    # Run daily at 8 AM UTC
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

jobs:
  env-validation:
    name: Environment Validation
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.12.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate environment variables
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
          KAJABI_WEBHOOK_SECRET: ${{ secrets.KAJABI_WEBHOOK_SECRET }}
          NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
        run: |
          echo "Validating environment variables..."
          
          MISSING_VARS=()
          
          # Check required variables
          [ -z "$DATABASE_URL" ] && MISSING_VARS+=("DATABASE_URL")
          [ -z "$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" ] && MISSING_VARS+=("NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY")
          [ -z "$CLERK_SECRET_KEY" ] && MISSING_VARS+=("CLERK_SECRET_KEY")
          [ -z "$NEXT_PUBLIC_SUPABASE_URL" ] && MISSING_VARS+=("NEXT_PUBLIC_SUPABASE_URL")
          [ -z "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ] && MISSING_VARS+=("NEXT_PUBLIC_SUPABASE_ANON_KEY")
          [ -z "$SUPABASE_SERVICE_ROLE" ] && MISSING_VARS+=("SUPABASE_SERVICE_ROLE")
          [ -z "$KAJABI_WEBHOOK_SECRET" ] && MISSING_VARS+=("KAJABI_WEBHOOK_SECRET")
          [ -z "$NEXT_PUBLIC_SITE_URL" ] && MISSING_VARS+=("NEXT_PUBLIC_SITE_URL")
          
          if [ ${#MISSING_VARS[@]} -ne 0 ]; then
            echo "::error::Missing required environment variables:"
            printf '%s\n' "${MISSING_VARS[@]}"
            exit 1
          fi
          
          # Validate URL formats
          if [[ ! "$DATABASE_URL" =~ ^postgresql:// ]]; then
            echo "::error::DATABASE_URL must be a PostgreSQL connection string"
            exit 1
          fi
          
          if [[ ! "$NEXT_PUBLIC_SUPABASE_URL" =~ ^https://.*\.supabase\.co$ ]]; then
            echo "::error::NEXT_PUBLIC_SUPABASE_URL must be a valid Supabase URL"
            exit 1
          fi
          
          if [[ ! "$NEXT_PUBLIC_SITE_URL" =~ ^https?:// ]]; then
            echo "::error::NEXT_PUBLIC_SITE_URL must be a valid URL"
            exit 1
          fi
          
          # Validate Clerk keys
          if [[ ! "$NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" =~ ^pk_(test|live)_ ]]; then
            echo "::error::NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY must be a valid Clerk publishable key"
            exit 1
          fi
          
          if [[ ! "$CLERK_SECRET_KEY" =~ ^sk_(test|live)_ ]]; then
            echo "::error::CLERK_SECRET_KEY must be a valid Clerk secret key"
            exit 1
          fi
          
          echo "✅ All environment variables are properly configured"

      - name: Test database connectivity
        run: |
          pnpm db:generate
          
          # Test basic database connection
          node -e "
            const { PrismaClient } = require('@elevate/db');
            const prisma = new PrismaClient();
            
            prisma.\$queryRaw\`SELECT 1\`
              .then(() => {
                console.log('✅ Database connection successful');
                process.exit(0);
              })
              .catch((error) => {
                console.error('❌ Database connection failed:', error.message);
                process.exit(1);
              })
              .finally(() => prisma.\$disconnect());
          "
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Test Supabase connectivity
        run: |
          # Test Supabase API connectivity
          curl -f -s -H "apikey: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            -H "Authorization: Bearer ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            "${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}/rest/v1/" > /dev/null
          echo "✅ Supabase API connectivity successful"

      - name: Test Clerk webhook endpoint
        if: inputs.environment == 'production' || github.event.schedule
        run: |
          # Test Clerk webhook endpoint availability
          WEBHOOK_URL="${{ secrets.NEXT_PUBLIC_SITE_URL }}/api/clerk/webhook"
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$WEBHOOK_URL" -X POST \
            -H "Content-Type: application/json" \
            -d '{}' || echo "000")
          
          if [[ "$HTTP_CODE" == "400" ]] || [[ "$HTTP_CODE" == "401" ]]; then
            echo "✅ Clerk webhook endpoint is accessible (returned $HTTP_CODE as expected for invalid request)"
          elif [[ "$HTTP_CODE" == "000" ]]; then
            echo "❌ Clerk webhook endpoint is not accessible"
            exit 1
          else
            echo "⚠️ Clerk webhook endpoint returned unexpected status: $HTTP_CODE"
          fi

      - name: Test Kajabi webhook endpoint
        if: inputs.environment == 'production' || github.event.schedule
        run: |
          # Test Kajabi webhook endpoint availability
          WEBHOOK_URL="${{ secrets.NEXT_PUBLIC_SITE_URL }}/api/kajabi/webhook"
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$WEBHOOK_URL" -X POST \
            -H "Content-Type: application/json" \
            -H "X-Kajabi-Signature: invalid" \
            -d '{}' || echo "000")
          
          if [[ "$HTTP_CODE" == "401" ]] || [[ "$HTTP_CODE" == "400" ]]; then
            echo "✅ Kajabi webhook endpoint is accessible (returned $HTTP_CODE as expected for invalid request)"
          elif [[ "$HTTP_CODE" == "000" ]]; then
            echo "❌ Kajabi webhook endpoint is not accessible"
            exit 1
          else
            echo "⚠️ Kajabi webhook endpoint returned unexpected status: $HTTP_CODE"
          fi

      - name: Check SSL certificate
        if: inputs.environment == 'production' || github.event.schedule
        run: |
          # Check SSL certificate validity
          DOMAIN=$(echo "${{ secrets.NEXT_PUBLIC_SITE_URL }}" | sed 's|https\?://||' | sed 's|/.*||')
          
          # Get certificate expiry date
          EXPIRY_DATE=$(echo | openssl s_client -servername "$DOMAIN" -connect "$DOMAIN:443" 2>/dev/null | \
            openssl x509 -noout -enddate | cut -d= -f2)
          
          # Convert to epoch time
          EXPIRY_EPOCH=$(date -d "$EXPIRY_DATE" +%s 2>/dev/null || date -j -f "%b %d %H:%M:%S %Y %Z" "$EXPIRY_DATE" +%s)
          CURRENT_EPOCH=$(date +%s)
          DAYS_UNTIL_EXPIRY=$(( (EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))
          
          if [ $DAYS_UNTIL_EXPIRY -lt 30 ]; then
            echo "::warning::SSL certificate expires in $DAYS_UNTIL_EXPIRY days ($EXPIRY_DATE)"
          elif [ $DAYS_UNTIL_EXPIRY -lt 7 ]; then
            echo "::error::SSL certificate expires in $DAYS_UNTIL_EXPIRY days ($EXPIRY_DATE)"
            exit 1
          else
            echo "✅ SSL certificate valid until $EXPIRY_DATE ($DAYS_UNTIL_EXPIRY days remaining)"
          fi

      - name: Generate environment report
        run: |
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # Environment Validation Report
          
          **Environment:** ${{ inputs.environment || 'production' }}
          **Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          **Site URL:** ${{ secrets.NEXT_PUBLIC_SITE_URL }}
          
          ## Validation Results
          
          | Component | Status | Notes |
          |-----------|--------|-------|
          | Environment Variables | ✅ Passed | All required variables present |
          | Database Connectivity | ✅ Passed | PostgreSQL connection successful |
          | Supabase API | ✅ Passed | REST API accessible |
          | Clerk Webhook | ✅ Passed | Endpoint responding |
          | Kajabi Webhook | ✅ Passed | Endpoint responding |
          | SSL Certificate | ✅ Passed | Valid and not expiring soon |
          
          ---
          *Generated by environment validation workflow*
          EOF