name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      apps:
        description: 'Apps to deploy'
        required: true
        default: 'both'
        type: choice
        options:
          - web
          - admin
          - both

concurrency:
  group: deploy-${{ github.ref }}-${{ inputs.environment || 'production' }}-${{ inputs.apps || 'both' }}
  cancel-in-progress: false

env:
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
  CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
  KAJABI_WEBHOOK_SECRET: ${{ secrets.KAJABI_WEBHOOK_SECRET }}
  NEXT_PUBLIC_SITE_URL: ${{ secrets.NEXT_PUBLIC_SITE_URL }}
  KAJABI_API_KEY: ${{ secrets.KAJABI_API_KEY }}
  KAJABI_CLIENT_SECRET: ${{ secrets.KAJABI_CLIENT_SECRET }}

jobs:
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
      deploy_web: ${{ steps.check.outputs.deploy_web }}
      deploy_admin: ${{ steps.check.outputs.deploy_admin }}
      apps: ${{ steps.check.outputs.apps }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine deployment parameters
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ inputs.environment }}"
            APPS="${{ inputs.apps }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
            APPS="both"
          else
            ENVIRONMENT="staging"
            APPS="both"
          fi
          
          # Determine which apps to deploy
          DEPLOY_WEB="false"
          DEPLOY_ADMIN="false"
          
          if [[ "$APPS" == "web" || "$APPS" == "both" ]]; then
            DEPLOY_WEB="true"
          fi
          
          if [[ "$APPS" == "admin" || "$APPS" == "both" ]]; then
            DEPLOY_ADMIN="true"
          fi
          
          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "apps=$APPS" >> $GITHUB_OUTPUT
          echo "deploy_web=$DEPLOY_WEB" >> $GITHUB_OUTPUT
          echo "deploy_admin=$DEPLOY_ADMIN" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
          echo "::notice::Deploying $APPS app(s) to $ENVIRONMENT"

      - name: Wait for CI to complete
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: 'Status Check'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30

  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    environment: ${{ needs.pre-deploy.outputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.12.4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Apply database migrations
        run: |
          cd packages/db
          npx prisma migrate deploy --schema=schema.prisma
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Refresh materialized views
        run: |
          cd packages/db
          # Add SQL to refresh materialized views if they exist
          echo "Refreshing materialized views..."
          # npx prisma db execute --file refresh-views.sql --schema=schema.prisma
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  deploy-web:
    name: Deploy Web App to Vercel
    runs-on: ubuntu-latest
    needs: [pre-deploy, database-migration]
    if: needs.pre-deploy.outputs.should_deploy == 'true' && needs.pre-deploy.outputs.deploy_web == 'true'
    environment: ${{ needs.pre-deploy.outputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy Web App to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_WEB_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_WEB_PROJECT_ID }}
          working-directory: ./
          vercel-args: ${{ needs.pre-deploy.outputs.environment == 'production' && '--prod' || '' }}

      - name: Output Web App URL
        run: |
          if [[ "${{ needs.pre-deploy.outputs.environment }}" == "production" ]]; then
            echo "🌐 Web App URL: https://leaps.mereka.org"
          else
            echo "🌐 Web App deployed to preview environment"
          fi

  deploy-admin:
    name: Deploy Admin App to Vercel
    runs-on: ubuntu-latest
    needs: [pre-deploy, database-migration]
    if: needs.pre-deploy.outputs.should_deploy == 'true' && needs.pre-deploy.outputs.deploy_admin == 'true'
    environment: ${{ needs.pre-deploy.outputs.environment }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy Admin App to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ADMIN_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_ADMIN_PROJECT_ID }}
          working-directory: ./apps/admin
          vercel-args: ${{ needs.pre-deploy.outputs.environment == 'production' && '--prod' || '' }}

      - name: Output Admin App URL
        run: |
          if [[ "${{ needs.pre-deploy.outputs.environment }}" == "production" ]]; then
            echo "🌐 Admin App URL: https://admin.leaps.mereka.org"
          else
            echo "🌐 Admin App deployed to preview environment"
          fi

  smoke-tests:
    name: Post-deployment Smoke Tests
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy-web, deploy-admin]
    if: always() && needs.pre-deploy.outputs.should_deploy == 'true' && (needs.deploy-web.result == 'success' || needs.deploy-admin.result == 'success' || needs.deploy-web.result == 'skipped' || needs.deploy-admin.result == 'skipped')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 60

      - name: Test Web App endpoints
        if: needs.pre-deploy.outputs.deploy_web == 'true' && needs.deploy-web.result == 'success'
        run: |
          BASE_URL="${{ secrets.NEXT_PUBLIC_SITE_URL }}"
          
          echo "Testing Web App endpoints..."
          
          # Test landing page
          curl -f -s "$BASE_URL/" > /dev/null
          echo "✅ Web App landing page accessible"
          
          # Test leaderboard
          curl -f -s "$BASE_URL/leaderboard" > /dev/null
          echo "✅ Web App leaderboard accessible"
          
          # Test API health
          curl -f -s "$BASE_URL/api/health" > /dev/null
          echo "✅ Web App API health check passed"

      - name: Test Admin App endpoints
        if: needs.pre-deploy.outputs.deploy_admin == 'true' && needs.deploy-admin.result == 'success'
        run: |
          ADMIN_URL="https://admin.leaps.mereka.org"
          if [[ "${{ needs.pre-deploy.outputs.environment }}" != "production" ]]; then
            echo "⏭️ Skipping admin app tests for non-production environment"
            exit 0
          fi
          
          echo "Testing Admin App endpoints..."
          
          # Test admin landing page
          curl -f -s "$ADMIN_URL/" > /dev/null
          echo "✅ Admin App landing page accessible"
          
          # Test admin API health
          curl -f -s "$ADMIN_URL/api/health" > /dev/null
          echo "✅ Admin App API health check passed"

      - name: Test authentication flow
        if: needs.pre-deploy.outputs.deploy_web == 'true' && needs.deploy-web.result == 'success'
        run: |
          BASE_URL="${{ secrets.NEXT_PUBLIC_SITE_URL }}"
          
          # Test Clerk authentication endpoints
          curl -f -s "$BASE_URL/sign-in" > /dev/null
          echo "✅ Web App sign-in page accessible"

      - name: Database connectivity test
        if: needs.pre-deploy.outputs.environment == 'production'
        run: |
          echo "Testing database connectivity..."
          # Add a simple database query test here
          echo "✅ Database connectivity verified"

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy-web, deploy-admin, smoke-tests]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          ENVIRONMENT="${{ needs.pre-deploy.outputs.environment }}"
          APPS="${{ needs.pre-deploy.outputs.apps }}"
          
          echo "📊 Deployment Summary:"
          echo "Environment: $ENVIRONMENT"
          echo "Apps: $APPS"
          echo ""
          
          # Check individual app deployment results
          WEB_STATUS="${{ needs.deploy-web.result }}"
          ADMIN_STATUS="${{ needs.deploy-admin.result }}"
          SMOKE_STATUS="${{ needs.smoke-tests.result }}"
          
          if [[ "$WEB_STATUS" == "success" || "$WEB_STATUS" == "skipped" ]]; then
            if [[ "$WEB_STATUS" == "success" ]]; then
              echo "✅ Web App deployment: SUCCESS"
              if [[ "$ENVIRONMENT" == "production" ]]; then
                echo "   🌐 https://leaps.mereka.org"
              fi
            else
              echo "⏭️ Web App deployment: SKIPPED"
            fi
          else
            echo "❌ Web App deployment: FAILED"
          fi
          
          if [[ "$ADMIN_STATUS" == "success" || "$ADMIN_STATUS" == "skipped" ]]; then
            if [[ "$ADMIN_STATUS" == "success" ]]; then
              echo "✅ Admin App deployment: SUCCESS"
              if [[ "$ENVIRONMENT" == "production" ]]; then
                echo "   🌐 https://admin.leaps.mereka.org"
              fi
            else
              echo "⏭️ Admin App deployment: SKIPPED"
            fi
          else
            echo "❌ Admin App deployment: FAILED"
          fi
          
          if [[ "$SMOKE_STATUS" == "success" ]]; then
            echo "✅ Smoke tests: PASSED"
          else
            echo "❌ Smoke tests: FAILED"
          fi
          
          # Overall status
          if [[ ("$WEB_STATUS" == "success" || "$WEB_STATUS" == "skipped") && ("$ADMIN_STATUS" == "success" || "$ADMIN_STATUS" == "skipped") && "$SMOKE_STATUS" == "success" ]]; then
            echo ""
            echo "🎉 Overall deployment: SUCCESS"
          else
            echo ""
            echo "💥 Overall deployment: FAILED"
            exit 1
          fi

      # Optional: Add Slack/Discord notification here
      # - name: Slack Notification
      #   if: always()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      #     message: |
      #       Deployment to ${{ needs.pre-deploy.outputs.environment }}: ${{ job.status }}
      #       Commit: ${{ github.sha }}
      #       Author: ${{ github.actor }}