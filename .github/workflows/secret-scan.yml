name: Secret Scan

on:
  pull_request:
    branches: [main, staging]
  push:
    branches: [main, staging]
  schedule:
    # Run weekly on Sunday at 2 AM UTC
    - cron: '0 2 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  gitleaks:
    name: Gitleaks Secret Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  custom-secret-patterns:
    name: Custom Secret Pattern Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for common secret patterns
        run: |
          echo "Checking for potential secrets in codebase..."
          
          # Check for hardcoded secrets (case-insensitive)
          SECRET_PATTERNS=(
            "password\s*=\s*['\"][^'\"]{8,}"
            "api_key\s*=\s*['\"][^'\"]{20,}"
            "secret\s*=\s*['\"][^'\"]{20,}"
            "token\s*=\s*['\"][^'\"]{20,}"
            "key\s*=\s*['\"][^'\"]{32,}"
            "clerk_secret_key\s*=\s*sk_[a-zA-Z0-9_]{20,}"
            "supabase.*service.*role\s*=\s*['\"][^'\"]{40,}"
            "kajabi.*secret\s*=\s*['\"][^'\"]{16,}"
            "database_url\s*=.*postgresql://.*:[^@]*@"
            "-----BEGIN [A-Z ]+-----"
          )
          
          FOUND_SECRETS=false
          
          for pattern in "${SECRET_PATTERNS[@]}"; do
            echo "Checking pattern: $pattern"
            if grep -r -i -E "$pattern" . \
              --exclude-dir=node_modules \
              --exclude-dir=.git \
              --exclude-dir=.next \
              --exclude-dir=dist \
              --exclude-dir=coverage \
              --exclude="*.lock" \
              --exclude="*.log" \
              --include="*.js" \
              --include="*.ts" \
              --include="*.tsx" \
              --include="*.jsx" \
              --include="*.json" \
              --include="*.env*" \
              --include="*.yml" \
              --include="*.yaml" \
              --include="*.md" \
              --include="*.txt" \
              --include="*.sh"; then
              echo "::warning::Potential secret found matching pattern: $pattern"
              FOUND_SECRETS=true
            fi
          done
          
          if [ "$FOUND_SECRETS" = true ]; then
            echo "::error::Potential secrets detected in codebase"
            exit 1
          else
            echo "::notice::No obvious secret patterns detected"
          fi

      - name: Check environment files
        run: |
          echo "Checking for .env files that might contain secrets..."
          
          # Find all .env files (including hidden ones)
          find . -name "*.env*" -type f \
            -not -path "./node_modules/*" \
            -not -path "./.git/*" \
            -not -path "./.next/*" > env_files.txt
          
          if [ -s env_files.txt ]; then
            echo "Found environment files:"
            cat env_files.txt
            
            # Check if any .env files (except .env.example) contain actual values
            while IFS= read -r file; do
              if [[ "$file" != *".example"* ]] && [[ "$file" != *".template"* ]]; then
                if grep -q "=.*[^[:space:]]" "$file" 2>/dev/null; then
                  echo "::warning::Environment file $file contains values and should not be committed"
                fi
              fi
            done < env_files.txt
            
            # Check for common production environment indicators
            if grep -r "NODE_ENV=production" . --include="*.env*" --exclude="*.example" 2>/dev/null; then
              echo "::warning::Production environment configuration detected"
            fi
          fi
          
          rm -f env_files.txt

      - name: Check for API keys in package.json
        run: |
          echo "Checking package.json files for potential secrets..."
          
          find . -name "package.json" \
            -not -path "./node_modules/*" \
            -exec grep -l "key\|secret\|token\|password" {} \; | \
          while IFS= read -r file; do
            echo "::warning::Found potential secrets in $file - please review"
            grep -n "key\|secret\|token\|password" "$file" || true
          done

      - name: Check for hardcoded URLs with credentials
        run: |
          echo "Checking for URLs with embedded credentials..."
          
          if grep -r -E "://[^:/@]+:[^@]+@" . \
            --exclude-dir=node_modules \
            --exclude-dir=.git \
            --exclude-dir=.next \
            --include="*.js" \
            --include="*.ts" \
            --include="*.tsx" \
            --include="*.jsx" \
            --include="*.json" \
            --include="*.md"; then
            echo "::error::Found URLs with embedded credentials"
            exit 1
          fi

  semgrep-secrets:
    name: Semgrep Secret Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/secrets
            p/javascript
            p/typescript
            p/nextjs
          generateSarif: "1"

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()

  truffleHog:
    name: TruffleHog Secret Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [gitleaks, custom-secret-patterns, semgrep-secrets, truffleHog]
    if: always()
    
    steps:
      - name: Report Results
        run: |
          echo "## Secret Scanning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Gitleaks | ${{ needs.gitleaks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Custom Patterns | ${{ needs.custom-secret-patterns.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Semgrep | ${{ needs.semgrep-secrets.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| TruffleHog | ${{ needs.truffleHog.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.gitleaks.result }}" == "failure" || "${{ needs.custom-secret-patterns.result }}" == "failure" || "${{ needs.semgrep-secrets.result }}" == "failure" || "${{ needs.truffleHog.result }}" == "failure" ]]; then
            echo "::error::Secret scanning detected potential security issues"
            echo "❌ **Security issues detected** - Please review the scan results above." >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **No secrets detected** - All security scans passed." >> $GITHUB_STEP_SUMMARY
          fi