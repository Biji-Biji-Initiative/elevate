name: Test Suite

on:
  push:
    branches: [main, staging, develop]
  pull_request:
    branches: [main, staging]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.11.1]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: elevate_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elevate_test
      TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elevate_test
      NODE_ENV: test
      KAJABI_WEBHOOK_SECRET: test-secret-123
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: test-clerk-key
      CLERK_SECRET_KEY: test-clerk-secret
      NEXT_PUBLIC_SITE_URL: http://localhost:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Run database migrations
        run: pnpm db:push

      - name: Seed test database
        run: pnpm db:seed

      - name: Type check
        run: pnpm run type-check

      - name: Lint (packages only)
        run: pnpm run lint:packages

      - name: Run unit tests
        run: pnpm run test --coverage

      - name: Run integration tests
        run: pnpm run test tests/integration --coverage

      - name: Run performance tests
        run: pnpm run test tests/performance

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit

      - name: Scan for secrets
        run: pnpm run verify:secrets

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Build applications
        run: pnpm run build

      - name: Verify exports
        run: pnpm run verify:exports

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: elevate_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elevate_e2e
      TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elevate_e2e
      NEXT_PUBLIC_SITE_URL: http://localhost:3000

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          pnpm db:generate
          pnpm db:push
          pnpm db:seed

      - name: Build applications
        run: pnpm run build

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: pnpm run test:e2e

      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: elevate_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elevate_perf
      TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/elevate_perf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.1
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          pnpm db:generate
          pnpm db:push
          pnpm db:seed

      - name: Run performance benchmarks
        run: pnpm run test tests/performance --reporter=json --outputFile=performance-results.json

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json

      - name: Comment performance results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('performance-results.json')) {
              const results = JSON.parse(fs.readFileSync('performance-results.json', 'utf8'));
              // Add logic to parse and comment performance metrics
              console.log('Performance results:', results);
            }

  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.test.result }}" != "success" ]; then
            echo "Tests failed"
            exit 1
          fi

      - name: Check security scan
        run: |
          if [ "${{ needs.security.result }}" != "success" ]; then
            echo "Security scan failed"
            exit 1
          fi

      - name: Check build
        run: |
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "Build failed"
            exit 1
          fi

      - name: All checks passed
        run: echo "âœ… All quality gates passed"
