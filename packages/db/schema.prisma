generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String         @id
  handle            String         @unique
  name              String
  email             String         @unique
  avatar_url        String?
  role              Role           @default(PARTICIPANT)
  user_type         UserType       @default(EDUCATOR)
  user_type_confirmed Boolean      @default(false)
  // Referral support
  ref_code          String?        @unique
  referred_by_user_id String?      @db.Text
  region            String?
  school            String?
  cohort            String?
  kajabi_contact_id String?        @unique
  created_at        DateTime       @default(now())
  earned_badges     EarnedBadge[]
  ledger            PointsLedger[]
  learn_tag_grants  LearnTagGrant[]
  submissions       Submission[]
  reviewed_submissions Submission[] @relation("ReviewedSubmissions")
  // Relations
  referrer          User?          @relation("Referrals", fields: [referred_by_user_id], references: [id])
  referred_users    User[]         @relation("Referrals")
  referrals_sent    ReferralEvent[] @relation("Referrer")
  referrals_received ReferralEvent[] @relation("Referee")

  @@map("users")
}

model Activity {
  code           String         @id
  name           String
  default_points Int
  ledger         PointsLedger[]
  submissions    Submission[]

  @@map("activities")
}

model Submission {
  id              String                 @id @default(cuid())
  user_id         String
  activity_code   String
  status          SubmissionStatus       @default(PENDING)
  visibility      Visibility             @default(PRIVATE)
  payload         Json
  attachments_rel SubmissionAttachment[]
  reviewer_id     String?
  reviewer        User?                  @relation("ReviewedSubmissions", fields: [reviewer_id], references: [id])
  review_note     String?
  approval_org_timezone String?
  created_at      DateTime               @default(now())
  updated_at      DateTime               @updatedAt
  activity        Activity               @relation(fields: [activity_code], references: [code], onDelete: Restrict)
  user            User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, activity_code])
  @@map("submissions")
}

model PointsLedger {
  id                String       @id @default(cuid())
  user_id           String
  activity_code     String
  source            LedgerSource
  delta_points      Int
  external_source   String?
  external_event_id String?
  event_time        DateTime
  meta              Json         @default("{}")
  created_at        DateTime     @default(now())
  activity          Activity     @relation(fields: [activity_code], references: [code], onDelete: Restrict)
  user              User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, activity_code], map: "ix_points_ledger_user_activity")
  @@index([activity_code, external_source, event_time], map: "ix_points_ledger_activity_source_time")
  // Ensure idempotency of external events (e.g., Kajabi). Allow multiple NULLs; enforce uniqueness for non-null values.
  @@unique([external_event_id], map: "ux_points_external_event")
  @@map("points_ledger")
}

model Badge {
  code          String        @id
  name          String
  description   String
  criteria      Json
  icon_url      String?
  earned_badges EarnedBadge[]

  @@map("badges")
}

model EarnedBadge {
  id         String   @id @default(cuid())
  user_id    String
  badge_code String
  earned_at  DateTime @default(now())
  badge      Badge    @relation(fields: [badge_code], references: [code], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, badge_code], map: "ux_earned_badges_user_code")
  @@index([badge_code])
  @@map("earned_badges")
}

model LearnTagGrant {
  user_id   String
  tag_name  String   @db.Citext
  granted_at DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, tag_name])
  @@map("learn_tag_grants")
}

model KajabiEvent {
  // Align tests: use event_id as primary key value
  id             String   @id
  event_id       String
  tag_name_raw   String
  tag_name_norm  String   @db.Citext
  contact_id     String
  email          String?
  created_at_utc DateTime
  processed_at   DateTime?
  user_match     String?
  status         String
  raw            Json
  payload        Json?

  @@unique([event_id, tag_name_norm], map: "ux_kajabi_event_tag")
  @@index([status, created_at_utc], map: "ix_kajabi_events_status_time")
  @@map("kajabi_events")
}

model SubmissionAttachment {
  id             String     @id @default(cuid())
  submission_id  String
  path           String
  hash           String?
  created_at     DateTime   @default(now())

  submission     Submission @relation(fields: [submission_id], references: [id], onDelete: Cascade)

  @@unique([submission_id, path])
  @@index([submission_id])
  @@map("submission_attachments")
}

model AuditLog {
  id         String   @id @default(cuid())
  actor_id   String
  action     String
  target_id  String?
  meta       Json?
  created_at DateTime @default(now())

  @@index([actor_id, created_at])
  @@map("audit_log")
}

// Minimal referral tracking for signup bonus (idempotent on (referrer, referee, event_type))
model ReferralEvent {
  id                 String   @id @default(cuid())
  referrer_user_id   String
  referee_user_id    String
  event_type         String   // 'signup' | 'learn_completed' (free-form to avoid enum churn)
  external_event_id  String?
  source             String?  // 'cookie' | 'kajabi'
  created_at         DateTime @default(now())

  referrer User @relation("Referrer", fields: [referrer_user_id], references: [id], onDelete: Cascade)
  referee  User @relation("Referee", fields: [referee_user_id], references: [id], onDelete: Cascade)

  @@unique([referrer_user_id, referee_user_id, event_type], map: "ux_referral_event_pair_event")
  @@index([referrer_user_id, created_at], map: "ix_referrals_referrer_time")
  @@map("referral_events")
}

enum Role {
  PARTICIPANT
  REVIEWER
  ADMIN
  SUPERADMIN
}

enum UserType {
  EDUCATOR
  STUDENT
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  REVOKED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum LedgerSource {
  MANUAL
  WEBHOOK
  FORM
}

// NOTE: Materialized views are not modeled in Prisma as they don't match table structure
// Views are queried directly using $queryRaw in analytics.ts:
// - leaderboard_totals: all-time leaderboard data
// - leaderboard_30d: 30-day rolling leaderboard
// - activity_metrics: per-activity submission and point metrics
// - cohort_metrics: cohort performance statistics
// - school_metrics: school performance statistics  
// - time_series_metrics: daily time-series data
