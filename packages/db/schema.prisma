generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String         @id
  handle            String         @unique
  name              String
  email             String         @unique
  avatar_url        String?
  role              Role           @default(PARTICIPANT)
  school            String?
  cohort            String?
  kajabi_contact_id String?        @unique
  created_at        DateTime       @default(now())
  earned_badges     EarnedBadge[]
  ledger            PointsLedger[]
  submissions       Submission[]
  reviewed_submissions Submission[] @relation("ReviewedSubmissions")

  @@map("users")
}

model Activity {
  code           String         @id
  name           String
  default_points Int
  ledger         PointsLedger[]
  submissions    Submission[]

  @@map("activities")
}

model Submission {
  id              String                 @id @default(cuid())
  user_id         String
  activity_code   String
  status          SubmissionStatus       @default(PENDING)
  visibility      Visibility             @default(PRIVATE)
  payload         Json
  attachments_rel SubmissionAttachment[]
  reviewer_id     String?
  reviewer        User?                  @relation("ReviewedSubmissions", fields: [reviewer_id], references: [id])
  review_note     String?
  created_at      DateTime               @default(now())
  updated_at      DateTime               @updatedAt
  activity        Activity               @relation(fields: [activity_code], references: [code], onDelete: Cascade)
  user            User                   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, activity_code])
  @@map("submissions")
}

model PointsLedger {
  id                String       @id @default(cuid())
  user_id           String
  activity_code     String
  source            LedgerSource
  delta_points      Int
  external_source   String?
  external_event_id String?      @unique
  created_at        DateTime     @default(now())
  activity          Activity     @relation(fields: [activity_code], references: [code], onDelete: Cascade)
  user              User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, activity_code])
  @@map("points_ledger")
}

model Badge {
  code          String        @id
  name          String
  description   String
  criteria      Json
  icon_url      String?
  earned_badges EarnedBadge[]

  @@map("badges")
}

model EarnedBadge {
  id         String   @id @default(cuid())
  user_id    String
  badge_code String
  earned_at  DateTime @default(now())
  badge      Badge    @relation(fields: [badge_code], references: [code], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, badge_code])
  @@index([badge_code])
  @@map("earned_badges")
}

model KajabiEvent {
  id           String    @id
  received_at  DateTime  @default(now())
  payload      Json
  processed_at DateTime?
  user_match   String?

  @@map("kajabi_events")
}

model SubmissionAttachment {
  id             String     @id @default(cuid())
  submission_id  String
  path           String
  hash           String?
  created_at     DateTime   @default(now())

  submission     Submission @relation(fields: [submission_id], references: [id], onDelete: Cascade)

  @@unique([submission_id, path])
  @@index([submission_id])
  @@map("submission_attachments")
}

model AuditLog {
  id         String   @id @default(cuid())
  actor_id   String
  action     String
  target_id  String?
  meta       Json?
  created_at DateTime @default(now())

  @@index([actor_id, created_at])
  @@map("audit_log")
}

enum Role {
  PARTICIPANT
  REVIEWER
  ADMIN
  SUPERADMIN
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum LedgerSource {
  MANUAL
  WEBHOOK
  FORM
}

// NOTE: Materialized views are not modeled in Prisma as they don't match table structure
// Views are queried directly using $queryRaw in analytics.ts:
// - leaderboard_totals: all-time leaderboard data
// - leaderboard_30d: 30-day rolling leaderboard
// - activity_metrics: per-activity submission and point metrics
// - cohort_metrics: cohort performance statistics
// - school_metrics: school performance statistics  
// - time_series_metrics: daily time-series data
