#!/bin/sh
# Pre-commit hook for code quality checks
# Install with: git config core.hooksPath .githooks

set -e

echo "🔍 Running pre-commit code quality checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    if [ "$1" = "error" ]; then
        echo "${RED}❌ $2${NC}"
    elif [ "$1" = "success" ]; then
        echo "${GREEN}✅ $2${NC}"
    elif [ "$1" = "warning" ]; then
        echo "${YELLOW}⚠️  $2${NC}"
    else
        echo "$2"
    fi
}

# Check 1: ESM imports
echo "Checking ESM imports..."
MISSING_EXTENSIONS=$(git diff --cached --name-only | grep -E '\.(ts|tsx)$' | xargs grep -l "from '\\./" 2>/dev/null | xargs grep "from '\\./" 2>/dev/null | grep -v "\.js'" || true)
if [ ! -z "$MISSING_EXTENSIONS" ]; then
    print_status "error" "Found relative imports missing .js extensions in staged files:"
    echo "$MISSING_EXTENSIONS"
    echo ""
    print_status "warning" "Fix with: Add .js extensions to relative imports"
    print_status "warning" "Example: import { foo } from './module.js'"
    exit 1
fi
print_status "success" "ESM imports check passed"

# Check 2: Test file structure
echo "Checking test file structure..."
STAGED_TESTS=$(git diff --cached --name-only | grep "\.test\." || true)
if [ ! -z "$STAGED_TESTS" ]; then
    for test_file in $STAGED_TESTS; do
        # Check if test is in proper location
        if [[ $test_file == packages/* ]]; then
            if [[ ! $test_file =~ /(src/__tests__|tests|__tests__)/ ]]; then
                print_status "error" "Test file not in expected location: $test_file"
                print_status "warning" "Expected: packages/*/src/__tests__/ or packages/*/tests/ or packages/*/__tests__/"
                exit 1
            fi
        fi
    done
fi
print_status "success" "Test structure check passed"

# Check 3: No deprecated imports
echo "Checking for deprecated imports..."
STAGED_TS_FILES=$(git diff --cached --name-only | grep -E '\.(ts|tsx)$' || true)
if [ ! -z "$STAGED_TS_FILES" ]; then
    DEPRECATED_IMPORTS=$(echo "$STAGED_TS_FILES" | xargs grep -l "from.*api-types'" 2>/dev/null | xargs grep "from.*api-types'" 2>/dev/null | grep -v "admin-api-types" || true)
    if [ ! -z "$DEPRECATED_IMPORTS" ]; then
        print_status "error" "Found imports from deprecated api-types.ts:"
        echo "$DEPRECATED_IMPORTS"
        print_status "warning" "Use DTO types from @elevate/types instead"
        exit 1
    fi
fi
print_status "success" "Deprecated imports check passed"

# Check 4: No secrets
echo "Checking for potential secrets..."
STAGED_FILES=$(git diff --cached --name-only | grep -E '\.(ts|tsx|js|jsx|json)$' || true)
if [ ! -z "$STAGED_FILES" ]; then
    # Check for common secret patterns (basic check)
    POTENTIAL_SECRETS=$(echo "$STAGED_FILES" | xargs grep -i -E "(password|secret|token|key)\s*=\s*['\"][^'\"]*['\"]" 2>/dev/null | grep -v "process.env" | grep -v "\.example\." || true)
    if [ ! -z "$POTENTIAL_SECRETS" ]; then
        print_status "warning" "Potential hardcoded secrets found:"
        echo "$POTENTIAL_SECRETS"
        print_status "warning" "Please review these files to ensure no secrets are committed"
        # Don't fail, just warn
    fi
fi
print_status "success" "Secrets check completed"

# Check 5: TypeScript compilation for staged files
echo "Checking TypeScript compilation..."
if [ ! -z "$STAGED_TS_FILES" ]; then
    # Quick TypeScript check (if available)
    if command -v tsc > /dev/null; then
        if ! tsc --noEmit --skipLibCheck > /dev/null 2>&1; then
            print_status "warning" "TypeScript compilation issues detected"
            print_status "warning" "Run 'npm run typecheck' to see details"
            # Don't fail pre-commit, but warn
        fi
    fi
fi
print_status "success" "TypeScript check completed"

print_status "success" "All pre-commit checks passed! 🚀"
echo ""
echo "Reminder: Run 'npm test' and 'npm run build' before pushing"